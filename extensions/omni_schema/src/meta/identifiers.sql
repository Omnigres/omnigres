/*
This code is based on meta from the Aquameta project (https://github.com/aquameta/meta):

BSD 2-Clause License

Copyright (c) 2019, Eric Hanson
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
create type cast_id as (source_type_schema_name text,source_type_name text,target_type_schema_name text,target_type_name text);
create function cast_id(source_type_schema_name text,source_type_name text,target_type_schema_name text,target_type_name text) returns cast_id as $_$ select row(source_type_schema_name,source_type_name,target_type_schema_name,target_type_name)::cast_id $_$ immutable language sql;
create function meta_id(cast_id cast_id) returns meta_id as $_$ select meta_id('cast'); $_$ immutable language sql;
create function cast_id(value jsonb) returns cast_id as $_$select cast_id((value->>'source_type_schema_name')::text, (value->>'source_type_name')::text, (value->>'target_type_schema_name')::text, (value->>'target_type_name')::text) $_$ immutable language sql;
create function eq(leftarg cast_id, rightarg jsonb) returns boolean as $_$select ((leftarg).source_type_schema_name)::text = (rightarg)->>'source_type_schema_name' and ((leftarg).source_type_name)::text = (rightarg)->>'source_type_name' and ((leftarg).target_type_schema_name)::text = (rightarg)->>'target_type_schema_name' and ((leftarg).target_type_name)::text = (rightarg)->>'target_type_name'$_$ immutable language sql;
create operator = (leftarg = cast_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as cast_id) with function cast_id(jsonb) as assignment;
create function cast_id_to_jsonb(value cast_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg cast_id) returns boolean as $_$select (leftarg)->>'source_type_schema_name' = ((rightarg).source_type_schema_name)::text and (leftarg)->>'source_type_name' = ((rightarg).source_type_name)::text and (leftarg)->>'target_type_schema_name' = ((rightarg).target_type_schema_name)::text and (leftarg)->>'target_type_name' = ((rightarg).target_type_name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = cast_id, procedure = eq);
create cast (cast_id as jsonb) with function cast_id_to_jsonb(cast_id) as assignment;
create function cast_id(value json) returns cast_id as $_$select cast_id((value->>'source_type_schema_name')::text, (value->>'source_type_name')::text, (value->>'target_type_schema_name')::text, (value->>'target_type_name')::text) $_$ immutable language sql;
create function eq(leftarg cast_id, rightarg json) returns boolean as $_$select ((leftarg).source_type_schema_name)::text = ((rightarg)->>'source_type_schema_name')::text and ((leftarg).source_type_name)::text = ((rightarg)->>'source_type_name')::text and ((leftarg).target_type_schema_name)::text = ((rightarg)->>'target_type_schema_name')::text and ((leftarg).target_type_name)::text = ((rightarg)->>'target_type_name')::text$_$ immutable language sql;
create operator = (leftarg = cast_id, rightarg = json, procedure = eq);
create cast (json as cast_id) with function cast_id(json) as assignment;
create function cast_id_to_json(value cast_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg cast_id) returns boolean as $_$select (leftarg)->>'source_type_schema_name' = ((rightarg).source_type_schema_name)::text and (leftarg)->>'source_type_name' = ((rightarg).source_type_name)::text and (leftarg)->>'target_type_schema_name' = ((rightarg).target_type_schema_name)::text and (leftarg)->>'target_type_name' = ((rightarg).target_type_name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = cast_id, procedure = eq);
create cast (cast_id as json) with function cast_id_to_json(cast_id) as assignment;
create type column_id as (schema_name text,relation_name text,name text);
create function column_id(schema_name text,relation_name text,name text) returns column_id as $_$ select row(schema_name,relation_name,name)::column_id $_$ immutable language sql;
create function meta_id(column_id column_id) returns meta_id as $_$ select meta_id('column'); $_$ immutable language sql;
create function column_id(value jsonb) returns column_id as $_$select column_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg column_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = column_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as column_id) with function column_id(jsonb) as assignment;
create function column_id_to_jsonb(value column_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg column_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = column_id, procedure = eq);
create cast (column_id as jsonb) with function column_id_to_jsonb(column_id) as assignment;
create function column_id(value json) returns column_id as $_$select column_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg column_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = column_id, rightarg = json, procedure = eq);
create cast (json as column_id) with function column_id(json) as assignment;
create function column_id_to_json(value column_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg column_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = column_id, procedure = eq);
create cast (column_id as json) with function column_id_to_json(column_id) as assignment;
create type connection_id as (pid int4,connection_start timestamptz);
create function connection_id(pid int4,connection_start timestamptz) returns connection_id as $_$ select row(pid,connection_start)::connection_id $_$ immutable language sql;
create function meta_id(connection_id connection_id) returns meta_id as $_$ select meta_id('connection'); $_$ immutable language sql;
create function connection_id(value jsonb) returns connection_id as $_$select connection_id((value->>'pid')::int4, (value->>'connection_start')::timestamptz) $_$ immutable language sql;
create function eq(leftarg connection_id, rightarg jsonb) returns boolean as $_$select ((leftarg).pid)::text = (rightarg)->>'pid' and ((leftarg).connection_start)::text = (rightarg)->>'connection_start'$_$ immutable language sql;
create operator = (leftarg = connection_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as connection_id) with function connection_id(jsonb) as assignment;
create function connection_id_to_jsonb(value connection_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg connection_id) returns boolean as $_$select (leftarg)->>'pid' = ((rightarg).pid)::text and (leftarg)->>'connection_start' = ((rightarg).connection_start)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = connection_id, procedure = eq);
create cast (connection_id as jsonb) with function connection_id_to_jsonb(connection_id) as assignment;
create function connection_id(value json) returns connection_id as $_$select connection_id((value->>'pid')::int4, (value->>'connection_start')::timestamptz) $_$ immutable language sql;
create function eq(leftarg connection_id, rightarg json) returns boolean as $_$select ((leftarg).pid)::text = ((rightarg)->>'pid')::text and ((leftarg).connection_start)::text = ((rightarg)->>'connection_start')::text$_$ immutable language sql;
create operator = (leftarg = connection_id, rightarg = json, procedure = eq);
create cast (json as connection_id) with function connection_id(json) as assignment;
create function connection_id_to_json(value connection_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg connection_id) returns boolean as $_$select (leftarg)->>'pid' = ((rightarg).pid)::text and (leftarg)->>'connection_start' = ((rightarg).connection_start)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = connection_id, procedure = eq);
create cast (connection_id as json) with function connection_id_to_json(connection_id) as assignment;
create type constraint_id as (schema_name text,relation_name text,name text);
create function constraint_id(schema_name text,relation_name text,name text) returns constraint_id as $_$ select row(schema_name,relation_name,name)::constraint_id $_$ immutable language sql;
create function meta_id(constraint_id constraint_id) returns meta_id as $_$ select meta_id('constraint'); $_$ immutable language sql;
create function constraint_id(value jsonb) returns constraint_id as $_$select constraint_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg constraint_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = constraint_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as constraint_id) with function constraint_id(jsonb) as assignment;
create function constraint_id_to_jsonb(value constraint_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg constraint_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = constraint_id, procedure = eq);
create cast (constraint_id as jsonb) with function constraint_id_to_jsonb(constraint_id) as assignment;
create function constraint_id(value json) returns constraint_id as $_$select constraint_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg constraint_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = constraint_id, rightarg = json, procedure = eq);
create cast (json as constraint_id) with function constraint_id(json) as assignment;
create function constraint_id_to_json(value constraint_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg constraint_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = constraint_id, procedure = eq);
create cast (constraint_id as json) with function constraint_id_to_json(constraint_id) as assignment;
create type constraint_check_id as (schema_name text,table_name text,name text,column_names text);
create function constraint_check_id(schema_name text,table_name text,name text,column_names text) returns constraint_check_id as $_$ select row(schema_name,table_name,name,column_names)::constraint_check_id $_$ immutable language sql;
create function meta_id(constraint_check_id constraint_check_id) returns meta_id as $_$ select meta_id('constraint_check'); $_$ immutable language sql;
create function constraint_check_id(value jsonb) returns constraint_check_id as $_$select constraint_check_id((value->>'schema_name')::text, (value->>'table_name')::text, (value->>'name')::text, (value->>'column_names')::text) $_$ immutable language sql;
create function eq(leftarg constraint_check_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).table_name)::text = (rightarg)->>'table_name' and ((leftarg).name)::text = (rightarg)->>'name' and ((leftarg).column_names)::text = (rightarg)->>'column_names'$_$ immutable language sql;
create operator = (leftarg = constraint_check_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as constraint_check_id) with function constraint_check_id(jsonb) as assignment;
create function constraint_check_id_to_jsonb(value constraint_check_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg constraint_check_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'table_name' = ((rightarg).table_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'column_names' = ((rightarg).column_names)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = constraint_check_id, procedure = eq);
create cast (constraint_check_id as jsonb) with function constraint_check_id_to_jsonb(constraint_check_id) as assignment;
create function constraint_check_id(value json) returns constraint_check_id as $_$select constraint_check_id((value->>'schema_name')::text, (value->>'table_name')::text, (value->>'name')::text, (value->>'column_names')::text) $_$ immutable language sql;
create function eq(leftarg constraint_check_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).table_name)::text = ((rightarg)->>'table_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text and ((leftarg).column_names)::text = ((rightarg)->>'column_names')::text$_$ immutable language sql;
create operator = (leftarg = constraint_check_id, rightarg = json, procedure = eq);
create cast (json as constraint_check_id) with function constraint_check_id(json) as assignment;
create function constraint_check_id_to_json(value constraint_check_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg constraint_check_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'table_name' = ((rightarg).table_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'column_names' = ((rightarg).column_names)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = constraint_check_id, procedure = eq);
create cast (constraint_check_id as json) with function constraint_check_id_to_json(constraint_check_id) as assignment;
create type constraint_unique_id as (schema_name text,table_name text,name text,column_names text);
create function constraint_unique_id(schema_name text,table_name text,name text,column_names text) returns constraint_unique_id as $_$ select row(schema_name,table_name,name,column_names)::constraint_unique_id $_$ immutable language sql;
create function meta_id(constraint_unique_id constraint_unique_id) returns meta_id as $_$ select meta_id('constraint_unique'); $_$ immutable language sql;
create function constraint_unique_id(value jsonb) returns constraint_unique_id as $_$select constraint_unique_id((value->>'schema_name')::text, (value->>'table_name')::text, (value->>'name')::text, (value->>'column_names')::text) $_$ immutable language sql;
create function eq(leftarg constraint_unique_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).table_name)::text = (rightarg)->>'table_name' and ((leftarg).name)::text = (rightarg)->>'name' and ((leftarg).column_names)::text = (rightarg)->>'column_names'$_$ immutable language sql;
create operator = (leftarg = constraint_unique_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as constraint_unique_id) with function constraint_unique_id(jsonb) as assignment;
create function constraint_unique_id_to_jsonb(value constraint_unique_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg constraint_unique_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'table_name' = ((rightarg).table_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'column_names' = ((rightarg).column_names)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = constraint_unique_id, procedure = eq);
create cast (constraint_unique_id as jsonb) with function constraint_unique_id_to_jsonb(constraint_unique_id) as assignment;
create function constraint_unique_id(value json) returns constraint_unique_id as $_$select constraint_unique_id((value->>'schema_name')::text, (value->>'table_name')::text, (value->>'name')::text, (value->>'column_names')::text) $_$ immutable language sql;
create function eq(leftarg constraint_unique_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).table_name)::text = ((rightarg)->>'table_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text and ((leftarg).column_names)::text = ((rightarg)->>'column_names')::text$_$ immutable language sql;
create operator = (leftarg = constraint_unique_id, rightarg = json, procedure = eq);
create cast (json as constraint_unique_id) with function constraint_unique_id(json) as assignment;
create function constraint_unique_id_to_json(value constraint_unique_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg constraint_unique_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'table_name' = ((rightarg).table_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'column_names' = ((rightarg).column_names)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = constraint_unique_id, procedure = eq);
create cast (constraint_unique_id as json) with function constraint_unique_id_to_json(constraint_unique_id) as assignment;
create type extension_id as (name text);
create function extension_id(name text) returns extension_id as $_$ select row(name)::extension_id $_$ immutable language sql;
create function meta_id(extension_id extension_id) returns meta_id as $_$ select meta_id('extension'); $_$ immutable language sql;
create function extension_id(value jsonb) returns extension_id as $_$select extension_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg extension_id, rightarg jsonb) returns boolean as $_$select ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = extension_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as extension_id) with function extension_id(jsonb) as assignment;
create function extension_id_to_jsonb(value extension_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg extension_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = extension_id, procedure = eq);
create cast (extension_id as jsonb) with function extension_id_to_jsonb(extension_id) as assignment;
create function extension_id(value json) returns extension_id as $_$select extension_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg extension_id, rightarg json) returns boolean as $_$select ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = extension_id, rightarg = json, procedure = eq);
create cast (json as extension_id) with function extension_id(json) as assignment;
create function extension_id_to_json(value extension_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg extension_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = extension_id, procedure = eq);
create cast (extension_id as json) with function extension_id_to_json(extension_id) as assignment;
create type field_id as (schema_name text,relation_name text,pk_column_names text[],pk_values text[],column_name text);
create function field_id(schema_name text,relation_name text,pk_column_names text[],pk_values text[],column_name text) returns field_id as $_$ select row(schema_name,relation_name,pk_column_names,pk_values,column_name)::field_id $_$ immutable language sql;
create function meta_id(field_id field_id) returns meta_id as $_$ select meta_id('field'); $_$ immutable language sql;
create function field_id(value jsonb) returns field_id as $_$select field_id((value->>'schema_name')::text, (value->>'relation_name')::text, (select array_agg(value) from jsonb_array_elements_text(value->'pk_column_names')), (select array_agg(value) from jsonb_array_elements_text(value->'pk_values')), (value->>'column_name')::text) $_$ immutable language sql;
create function eq(leftarg field_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and to_jsonb((leftarg).pk_column_names) = rightarg->'pk_column_names' and to_jsonb((leftarg).pk_values) = rightarg->'pk_values' and ((leftarg).column_name)::text = (rightarg)->>'column_name'$_$ immutable language sql;
create operator = (leftarg = field_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as field_id) with function field_id(jsonb) as assignment;
create function field_id_to_jsonb(value field_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg field_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and leftarg->'pk_column_names' = to_jsonb((rightarg).pk_column_names) and leftarg->'pk_values' = to_jsonb((rightarg).pk_values) and (leftarg)->>'column_name' = ((rightarg).column_name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = field_id, procedure = eq);
create cast (field_id as jsonb) with function field_id_to_jsonb(field_id) as assignment;
create function field_id(value json) returns field_id as $_$select field_id((value->>'schema_name')::text, (value->>'relation_name')::text, (select array_agg(value) from json_array_elements_text(value->'pk_column_names')), (select array_agg(value) from json_array_elements_text(value->'pk_values')), (value->>'column_name')::text) $_$ immutable language sql;
create function eq(leftarg field_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and to_json((leftarg).pk_column_names)::text = (rightarg->'pk_column_names')::text and to_json((leftarg).pk_values)::text = (rightarg->'pk_values')::text and ((leftarg).column_name)::text = ((rightarg)->>'column_name')::text$_$ immutable language sql;
create operator = (leftarg = field_id, rightarg = json, procedure = eq);
create cast (json as field_id) with function field_id(json) as assignment;
create function field_id_to_json(value field_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg field_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg->'pk_column_names')::text = (to_json((rightarg).pk_column_names))::text and (leftarg->'pk_values')::text = (to_json((rightarg).pk_values))::text and (leftarg)->>'column_name' = ((rightarg).column_name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = field_id, procedure = eq);
create cast (field_id as json) with function field_id_to_json(field_id) as assignment;
create type foreign_column_id as (schema_name text,name text);
create function foreign_column_id(schema_name text,name text) returns foreign_column_id as $_$ select row(schema_name,name)::foreign_column_id $_$ immutable language sql;
create function meta_id(foreign_column_id foreign_column_id) returns meta_id as $_$ select meta_id('foreign_column'); $_$ immutable language sql;
create function foreign_column_id(value jsonb) returns foreign_column_id as $_$select foreign_column_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_column_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = foreign_column_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as foreign_column_id) with function foreign_column_id(jsonb) as assignment;
create function foreign_column_id_to_jsonb(value foreign_column_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg foreign_column_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = foreign_column_id, procedure = eq);
create cast (foreign_column_id as jsonb) with function foreign_column_id_to_jsonb(foreign_column_id) as assignment;
create function foreign_column_id(value json) returns foreign_column_id as $_$select foreign_column_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_column_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = foreign_column_id, rightarg = json, procedure = eq);
create cast (json as foreign_column_id) with function foreign_column_id(json) as assignment;
create function foreign_column_id_to_json(value foreign_column_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg foreign_column_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = foreign_column_id, procedure = eq);
create cast (foreign_column_id as json) with function foreign_column_id_to_json(foreign_column_id) as assignment;
create type foreign_data_wrapper_id as (name text);
create function foreign_data_wrapper_id(name text) returns foreign_data_wrapper_id as $_$ select row(name)::foreign_data_wrapper_id $_$ immutable language sql;
create function meta_id(foreign_data_wrapper_id foreign_data_wrapper_id) returns meta_id as $_$ select meta_id('foreign_data_wrapper'); $_$ immutable language sql;
create function foreign_data_wrapper_id(value jsonb) returns foreign_data_wrapper_id as $_$select foreign_data_wrapper_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_data_wrapper_id, rightarg jsonb) returns boolean as $_$select ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = foreign_data_wrapper_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as foreign_data_wrapper_id) with function foreign_data_wrapper_id(jsonb) as assignment;
create function foreign_data_wrapper_id_to_jsonb(value foreign_data_wrapper_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg foreign_data_wrapper_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = foreign_data_wrapper_id, procedure = eq);
create cast (foreign_data_wrapper_id as jsonb) with function foreign_data_wrapper_id_to_jsonb(foreign_data_wrapper_id) as assignment;
create function foreign_data_wrapper_id(value json) returns foreign_data_wrapper_id as $_$select foreign_data_wrapper_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_data_wrapper_id, rightarg json) returns boolean as $_$select ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = foreign_data_wrapper_id, rightarg = json, procedure = eq);
create cast (json as foreign_data_wrapper_id) with function foreign_data_wrapper_id(json) as assignment;
create function foreign_data_wrapper_id_to_json(value foreign_data_wrapper_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg foreign_data_wrapper_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = foreign_data_wrapper_id, procedure = eq);
create cast (foreign_data_wrapper_id as json) with function foreign_data_wrapper_id_to_json(foreign_data_wrapper_id) as assignment;
create type foreign_key_id as (schema_name text,relation_name text,name text);
create function foreign_key_id(schema_name text,relation_name text,name text) returns foreign_key_id as $_$ select row(schema_name,relation_name,name)::foreign_key_id $_$ immutable language sql;
create function meta_id(foreign_key_id foreign_key_id) returns meta_id as $_$ select meta_id('foreign_key'); $_$ immutable language sql;
create function foreign_key_id(value jsonb) returns foreign_key_id as $_$select foreign_key_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_key_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = foreign_key_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as foreign_key_id) with function foreign_key_id(jsonb) as assignment;
create function foreign_key_id_to_jsonb(value foreign_key_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg foreign_key_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = foreign_key_id, procedure = eq);
create cast (foreign_key_id as jsonb) with function foreign_key_id_to_jsonb(foreign_key_id) as assignment;
create function foreign_key_id(value json) returns foreign_key_id as $_$select foreign_key_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_key_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = foreign_key_id, rightarg = json, procedure = eq);
create cast (json as foreign_key_id) with function foreign_key_id(json) as assignment;
create function foreign_key_id_to_json(value foreign_key_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg foreign_key_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = foreign_key_id, procedure = eq);
create cast (foreign_key_id as json) with function foreign_key_id_to_json(foreign_key_id) as assignment;
create type foreign_server_id as (name text);
create function foreign_server_id(name text) returns foreign_server_id as $_$ select row(name)::foreign_server_id $_$ immutable language sql;
create function meta_id(foreign_server_id foreign_server_id) returns meta_id as $_$ select meta_id('foreign_server'); $_$ immutable language sql;
create function foreign_server_id(value jsonb) returns foreign_server_id as $_$select foreign_server_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_server_id, rightarg jsonb) returns boolean as $_$select ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = foreign_server_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as foreign_server_id) with function foreign_server_id(jsonb) as assignment;
create function foreign_server_id_to_jsonb(value foreign_server_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg foreign_server_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = foreign_server_id, procedure = eq);
create cast (foreign_server_id as jsonb) with function foreign_server_id_to_jsonb(foreign_server_id) as assignment;
create function foreign_server_id(value json) returns foreign_server_id as $_$select foreign_server_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_server_id, rightarg json) returns boolean as $_$select ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = foreign_server_id, rightarg = json, procedure = eq);
create cast (json as foreign_server_id) with function foreign_server_id(json) as assignment;
create function foreign_server_id_to_json(value foreign_server_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg foreign_server_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = foreign_server_id, procedure = eq);
create cast (foreign_server_id as json) with function foreign_server_id_to_json(foreign_server_id) as assignment;
create type foreign_table_id as (schema_name text,name text);
create function foreign_table_id(schema_name text,name text) returns foreign_table_id as $_$ select row(schema_name,name)::foreign_table_id $_$ immutable language sql;
create function meta_id(foreign_table_id foreign_table_id) returns meta_id as $_$ select meta_id('foreign_table'); $_$ immutable language sql;
create function foreign_table_id(value jsonb) returns foreign_table_id as $_$select foreign_table_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_table_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = foreign_table_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as foreign_table_id) with function foreign_table_id(jsonb) as assignment;
create function foreign_table_id_to_jsonb(value foreign_table_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg foreign_table_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = foreign_table_id, procedure = eq);
create cast (foreign_table_id as jsonb) with function foreign_table_id_to_jsonb(foreign_table_id) as assignment;
create function foreign_table_id(value json) returns foreign_table_id as $_$select foreign_table_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg foreign_table_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = foreign_table_id, rightarg = json, procedure = eq);
create cast (json as foreign_table_id) with function foreign_table_id(json) as assignment;
create function foreign_table_id_to_json(value foreign_table_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg foreign_table_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = foreign_table_id, procedure = eq);
create cast (foreign_table_id as json) with function foreign_table_id_to_json(foreign_table_id) as assignment;
create type function_id as (schema_name text,name text,parameters text[]);
create function function_id(schema_name text,name text,parameters text[]) returns function_id as $_$ select row(schema_name,name,parameters)::function_id $_$ immutable language sql;
create function meta_id(function_id function_id) returns meta_id as $_$ select meta_id('function'); $_$ immutable language sql;
create function function_id(value jsonb) returns function_id as $_$select function_id((value->>'schema_name')::text, (value->>'name')::text, (select array_agg(value) from jsonb_array_elements_text(value->'parameters'))) $_$ immutable language sql;
create function eq(leftarg function_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name' and to_jsonb((leftarg).parameters) = rightarg->'parameters'$_$ immutable language sql;
create operator = (leftarg = function_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as function_id) with function function_id(jsonb) as assignment;
create function function_id_to_jsonb(value function_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg function_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and leftarg->'parameters' = to_jsonb((rightarg).parameters)$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = function_id, procedure = eq);
create cast (function_id as jsonb) with function function_id_to_jsonb(function_id) as assignment;
create function function_id(value json) returns function_id as $_$select function_id((value->>'schema_name')::text, (value->>'name')::text, (select array_agg(value) from json_array_elements_text(value->'parameters'))) $_$ immutable language sql;
create function eq(leftarg function_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text and to_json((leftarg).parameters)::text = (rightarg->'parameters')::text$_$ immutable language sql;
create operator = (leftarg = function_id, rightarg = json, procedure = eq);
create cast (json as function_id) with function function_id(json) as assignment;
create function function_id_to_json(value function_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg function_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg->'parameters')::text = (to_json((rightarg).parameters))::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = function_id, procedure = eq);
create cast (function_id as json) with function function_id_to_json(function_id) as assignment;
create type operator_id as (schema_name text,name text,left_arg_type_schema_name text,left_arg_type_name text,right_arg_type_schema_name text,right_arg_type_name text);
create function operator_id(schema_name text,name text,left_arg_type_schema_name text,left_arg_type_name text,right_arg_type_schema_name text,right_arg_type_name text) returns operator_id as $_$ select row(schema_name,name,left_arg_type_schema_name,left_arg_type_name,right_arg_type_schema_name,right_arg_type_name)::operator_id $_$ immutable language sql;
create function meta_id(operator_id operator_id) returns meta_id as $_$ select meta_id('operator'); $_$ immutable language sql;
create function operator_id(value jsonb) returns operator_id as $_$select operator_id((value->>'schema_name')::text, (value->>'name')::text, (value->>'left_arg_type_schema_name')::text, (value->>'left_arg_type_name')::text, (value->>'right_arg_type_schema_name')::text, (value->>'right_arg_type_name')::text) $_$ immutable language sql;
create function eq(leftarg operator_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name' and ((leftarg).left_arg_type_schema_name)::text = (rightarg)->>'left_arg_type_schema_name' and ((leftarg).left_arg_type_name)::text = (rightarg)->>'left_arg_type_name' and ((leftarg).right_arg_type_schema_name)::text = (rightarg)->>'right_arg_type_schema_name' and ((leftarg).right_arg_type_name)::text = (rightarg)->>'right_arg_type_name'$_$ immutable language sql;
create operator = (leftarg = operator_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as operator_id) with function operator_id(jsonb) as assignment;
create function operator_id_to_jsonb(value operator_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg operator_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'left_arg_type_schema_name' = ((rightarg).left_arg_type_schema_name)::text and (leftarg)->>'left_arg_type_name' = ((rightarg).left_arg_type_name)::text and (leftarg)->>'right_arg_type_schema_name' = ((rightarg).right_arg_type_schema_name)::text and (leftarg)->>'right_arg_type_name' = ((rightarg).right_arg_type_name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = operator_id, procedure = eq);
create cast (operator_id as jsonb) with function operator_id_to_jsonb(operator_id) as assignment;
create function operator_id(value json) returns operator_id as $_$select operator_id((value->>'schema_name')::text, (value->>'name')::text, (value->>'left_arg_type_schema_name')::text, (value->>'left_arg_type_name')::text, (value->>'right_arg_type_schema_name')::text, (value->>'right_arg_type_name')::text) $_$ immutable language sql;
create function eq(leftarg operator_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text and ((leftarg).left_arg_type_schema_name)::text = ((rightarg)->>'left_arg_type_schema_name')::text and ((leftarg).left_arg_type_name)::text = ((rightarg)->>'left_arg_type_name')::text and ((leftarg).right_arg_type_schema_name)::text = ((rightarg)->>'right_arg_type_schema_name')::text and ((leftarg).right_arg_type_name)::text = ((rightarg)->>'right_arg_type_name')::text$_$ immutable language sql;
create operator = (leftarg = operator_id, rightarg = json, procedure = eq);
create cast (json as operator_id) with function operator_id(json) as assignment;
create function operator_id_to_json(value operator_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg operator_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text and (leftarg)->>'left_arg_type_schema_name' = ((rightarg).left_arg_type_schema_name)::text and (leftarg)->>'left_arg_type_name' = ((rightarg).left_arg_type_name)::text and (leftarg)->>'right_arg_type_schema_name' = ((rightarg).right_arg_type_schema_name)::text and (leftarg)->>'right_arg_type_name' = ((rightarg).right_arg_type_name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = operator_id, procedure = eq);
create cast (operator_id as json) with function operator_id_to_json(operator_id) as assignment;
create type policy_id as (schema_name text,relation_name text,name text);
create function policy_id(schema_name text,relation_name text,name text) returns policy_id as $_$ select row(schema_name,relation_name,name)::policy_id $_$ immutable language sql;
create function meta_id(policy_id policy_id) returns meta_id as $_$ select meta_id('policy'); $_$ immutable language sql;
create function policy_id(value jsonb) returns policy_id as $_$select policy_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg policy_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = policy_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as policy_id) with function policy_id(jsonb) as assignment;
create function policy_id_to_jsonb(value policy_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg policy_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = policy_id, procedure = eq);
create cast (policy_id as jsonb) with function policy_id_to_jsonb(policy_id) as assignment;
create function policy_id(value json) returns policy_id as $_$select policy_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg policy_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = policy_id, rightarg = json, procedure = eq);
create cast (json as policy_id) with function policy_id(json) as assignment;
create function policy_id_to_json(value policy_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg policy_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = policy_id, procedure = eq);
create cast (policy_id as json) with function policy_id_to_json(policy_id) as assignment;
create type relation_id as (schema_name text,name text);
create function relation_id(schema_name text,name text) returns relation_id as $_$ select row(schema_name,name)::relation_id $_$ immutable language sql;
create function meta_id(relation_id relation_id) returns meta_id as $_$ select meta_id('relation'); $_$ immutable language sql;
create function relation_id(value jsonb) returns relation_id as $_$select relation_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg relation_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = relation_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as relation_id) with function relation_id(jsonb) as assignment;
create function relation_id_to_jsonb(value relation_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg relation_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = relation_id, procedure = eq);
create cast (relation_id as jsonb) with function relation_id_to_jsonb(relation_id) as assignment;
create function relation_id(value json) returns relation_id as $_$select relation_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg relation_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = relation_id, rightarg = json, procedure = eq);
create cast (json as relation_id) with function relation_id(json) as assignment;
create function relation_id_to_json(value relation_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg relation_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = relation_id, procedure = eq);
create cast (relation_id as json) with function relation_id_to_json(relation_id) as assignment;
create type role_id as (name text);
create function role_id(name text) returns role_id as $_$ select row(name)::role_id $_$ immutable language sql;
create function meta_id(role_id role_id) returns meta_id as $_$ select meta_id('role'); $_$ immutable language sql;
create function role_id(value jsonb) returns role_id as $_$select role_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg role_id, rightarg jsonb) returns boolean as $_$select ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = role_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as role_id) with function role_id(jsonb) as assignment;
create function role_id_to_jsonb(value role_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg role_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = role_id, procedure = eq);
create cast (role_id as jsonb) with function role_id_to_jsonb(role_id) as assignment;
create function role_id(value json) returns role_id as $_$select role_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg role_id, rightarg json) returns boolean as $_$select ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = role_id, rightarg = json, procedure = eq);
create cast (json as role_id) with function role_id(json) as assignment;
create function role_id_to_json(value role_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg role_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = role_id, procedure = eq);
create cast (role_id as json) with function role_id_to_json(role_id) as assignment;
create type row_id as (schema_name text,relation_name text,pk_column_names text[],pk_values text[]);
create function row_id(schema_name text,relation_name text,pk_column_names text[],pk_values text[]) returns row_id as $_$ select row(schema_name,relation_name,pk_column_names,pk_values)::row_id $_$ immutable language sql;
create function meta_id(row_id row_id) returns meta_id as $_$ select meta_id('row'); $_$ immutable language sql;
create function row_id(value jsonb) returns row_id as $_$select row_id((value->>'schema_name')::text, (value->>'relation_name')::text, (select array_agg(value) from jsonb_array_elements_text(value->'pk_column_names')), (select array_agg(value) from jsonb_array_elements_text(value->'pk_values'))) $_$ immutable language sql;
create function eq(leftarg row_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and to_jsonb((leftarg).pk_column_names) = rightarg->'pk_column_names' and to_jsonb((leftarg).pk_values) = rightarg->'pk_values'$_$ immutable language sql;
create operator = (leftarg = row_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as row_id) with function row_id(jsonb) as assignment;
create function row_id_to_jsonb(value row_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg row_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and leftarg->'pk_column_names' = to_jsonb((rightarg).pk_column_names) and leftarg->'pk_values' = to_jsonb((rightarg).pk_values)$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = row_id, procedure = eq);
create cast (row_id as jsonb) with function row_id_to_jsonb(row_id) as assignment;
create function row_id(value json) returns row_id as $_$select row_id((value->>'schema_name')::text, (value->>'relation_name')::text, (select array_agg(value) from json_array_elements_text(value->'pk_column_names')), (select array_agg(value) from json_array_elements_text(value->'pk_values'))) $_$ immutable language sql;
create function eq(leftarg row_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and to_json((leftarg).pk_column_names)::text = (rightarg->'pk_column_names')::text and to_json((leftarg).pk_values)::text = (rightarg->'pk_values')::text$_$ immutable language sql;
create operator = (leftarg = row_id, rightarg = json, procedure = eq);
create cast (json as row_id) with function row_id(json) as assignment;
create function row_id_to_json(value row_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg row_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg->'pk_column_names')::text = (to_json((rightarg).pk_column_names))::text and (leftarg->'pk_values')::text = (to_json((rightarg).pk_values))::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = row_id, procedure = eq);
create cast (row_id as json) with function row_id_to_json(row_id) as assignment;
create type schema_id as (name text);
create function schema_id(name text) returns schema_id as $_$ select row(name)::schema_id $_$ immutable language sql;
create function meta_id(schema_id schema_id) returns meta_id as $_$ select meta_id('schema'); $_$ immutable language sql;
create function schema_id(value jsonb) returns schema_id as $_$select schema_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg schema_id, rightarg jsonb) returns boolean as $_$select ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = schema_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as schema_id) with function schema_id(jsonb) as assignment;
create function schema_id_to_jsonb(value schema_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg schema_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = schema_id, procedure = eq);
create cast (schema_id as jsonb) with function schema_id_to_jsonb(schema_id) as assignment;
create function schema_id(value json) returns schema_id as $_$select schema_id((value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg schema_id, rightarg json) returns boolean as $_$select ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = schema_id, rightarg = json, procedure = eq);
create cast (json as schema_id) with function schema_id(json) as assignment;
create function schema_id_to_json(value schema_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg schema_id) returns boolean as $_$select (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = schema_id, procedure = eq);
create cast (schema_id as json) with function schema_id_to_json(schema_id) as assignment;
create type sequence_id as (schema_name text,name text);
create function sequence_id(schema_name text,name text) returns sequence_id as $_$ select row(schema_name,name)::sequence_id $_$ immutable language sql;
create function meta_id(sequence_id sequence_id) returns meta_id as $_$ select meta_id('sequence'); $_$ immutable language sql;
create function sequence_id(value jsonb) returns sequence_id as $_$select sequence_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg sequence_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = sequence_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as sequence_id) with function sequence_id(jsonb) as assignment;
create function sequence_id_to_jsonb(value sequence_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg sequence_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = sequence_id, procedure = eq);
create cast (sequence_id as jsonb) with function sequence_id_to_jsonb(sequence_id) as assignment;
create function sequence_id(value json) returns sequence_id as $_$select sequence_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg sequence_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = sequence_id, rightarg = json, procedure = eq);
create cast (json as sequence_id) with function sequence_id(json) as assignment;
create function sequence_id_to_json(value sequence_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg sequence_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = sequence_id, procedure = eq);
create cast (sequence_id as json) with function sequence_id_to_json(sequence_id) as assignment;
create type table_id as (schema_name text,name text);
create function table_id(schema_name text,name text) returns table_id as $_$ select row(schema_name,name)::table_id $_$ immutable language sql;
create function meta_id(table_id table_id) returns meta_id as $_$ select meta_id('table'); $_$ immutable language sql;
create function table_id(value jsonb) returns table_id as $_$select table_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg table_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = table_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as table_id) with function table_id(jsonb) as assignment;
create function table_id_to_jsonb(value table_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg table_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = table_id, procedure = eq);
create cast (table_id as jsonb) with function table_id_to_jsonb(table_id) as assignment;
create function table_id(value json) returns table_id as $_$select table_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg table_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = table_id, rightarg = json, procedure = eq);
create cast (json as table_id) with function table_id(json) as assignment;
create function table_id_to_json(value table_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg table_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = table_id, procedure = eq);
create cast (table_id as json) with function table_id_to_json(table_id) as assignment;
create type table_privilege_id as (schema_name text,relation_name text,role text,type text);
create function table_privilege_id(schema_name text,relation_name text,role text,type text) returns table_privilege_id as $_$ select row(schema_name,relation_name,role,type)::table_privilege_id $_$ immutable language sql;
create function meta_id(table_privilege_id table_privilege_id) returns meta_id as $_$ select meta_id('table_privilege'); $_$ immutable language sql;
create function table_privilege_id(value jsonb) returns table_privilege_id as $_$select table_privilege_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'role')::text, (value->>'type')::text) $_$ immutable language sql;
create function eq(leftarg table_privilege_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).role)::text = (rightarg)->>'role' and ((leftarg).type)::text = (rightarg)->>'type'$_$ immutable language sql;
create operator = (leftarg = table_privilege_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as table_privilege_id) with function table_privilege_id(jsonb) as assignment;
create function table_privilege_id_to_jsonb(value table_privilege_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg table_privilege_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'role' = ((rightarg).role)::text and (leftarg)->>'type' = ((rightarg).type)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = table_privilege_id, procedure = eq);
create cast (table_privilege_id as jsonb) with function table_privilege_id_to_jsonb(table_privilege_id) as assignment;
create function table_privilege_id(value json) returns table_privilege_id as $_$select table_privilege_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'role')::text, (value->>'type')::text) $_$ immutable language sql;
create function eq(leftarg table_privilege_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).role)::text = ((rightarg)->>'role')::text and ((leftarg).type)::text = ((rightarg)->>'type')::text$_$ immutable language sql;
create operator = (leftarg = table_privilege_id, rightarg = json, procedure = eq);
create cast (json as table_privilege_id) with function table_privilege_id(json) as assignment;
create function table_privilege_id_to_json(value table_privilege_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg table_privilege_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'role' = ((rightarg).role)::text and (leftarg)->>'type' = ((rightarg).type)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = table_privilege_id, procedure = eq);
create cast (table_privilege_id as json) with function table_privilege_id_to_json(table_privilege_id) as assignment;
create type trigger_id as (schema_name text,relation_name text,name text);
create function trigger_id(schema_name text,relation_name text,name text) returns trigger_id as $_$ select row(schema_name,relation_name,name)::trigger_id $_$ immutable language sql;
create function meta_id(trigger_id trigger_id) returns meta_id as $_$ select meta_id('trigger'); $_$ immutable language sql;
create function trigger_id(value jsonb) returns trigger_id as $_$select trigger_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg trigger_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).relation_name)::text = (rightarg)->>'relation_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = trigger_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as trigger_id) with function trigger_id(jsonb) as assignment;
create function trigger_id_to_jsonb(value trigger_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg trigger_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = trigger_id, procedure = eq);
create cast (trigger_id as jsonb) with function trigger_id_to_jsonb(trigger_id) as assignment;
create function trigger_id(value json) returns trigger_id as $_$select trigger_id((value->>'schema_name')::text, (value->>'relation_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg trigger_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).relation_name)::text = ((rightarg)->>'relation_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = trigger_id, rightarg = json, procedure = eq);
create cast (json as trigger_id) with function trigger_id(json) as assignment;
create function trigger_id_to_json(value trigger_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg trigger_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'relation_name' = ((rightarg).relation_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = trigger_id, procedure = eq);
create cast (trigger_id as json) with function trigger_id_to_json(trigger_id) as assignment;
create type type_id as (schema_name text,name text);
create function type_id(schema_name text,name text) returns type_id as $_$ select row(schema_name,name)::type_id $_$ immutable language sql;
create function meta_id(type_id type_id) returns meta_id as $_$ select meta_id('type'); $_$ immutable language sql;
create function type_id(value jsonb) returns type_id as $_$select type_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg type_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = type_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as type_id) with function type_id(jsonb) as assignment;
create function type_id_to_jsonb(value type_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg type_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = type_id, procedure = eq);
create cast (type_id as jsonb) with function type_id_to_jsonb(type_id) as assignment;
create function type_id(value json) returns type_id as $_$select type_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg type_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = type_id, rightarg = json, procedure = eq);
create cast (json as type_id) with function type_id(json) as assignment;
create function type_id_to_json(value type_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg type_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = type_id, procedure = eq);
create cast (type_id as json) with function type_id_to_json(type_id) as assignment;
create type view_id as (schema_name text,name text);
create function view_id(schema_name text,name text) returns view_id as $_$ select row(schema_name,name)::view_id $_$ immutable language sql;
create function meta_id(view_id view_id) returns meta_id as $_$ select meta_id('view'); $_$ immutable language sql;
create function view_id(value jsonb) returns view_id as $_$select view_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg view_id, rightarg jsonb) returns boolean as $_$select ((leftarg).schema_name)::text = (rightarg)->>'schema_name' and ((leftarg).name)::text = (rightarg)->>'name'$_$ immutable language sql;
create operator = (leftarg = view_id, rightarg = jsonb, procedure = eq);
create cast (jsonb as view_id) with function view_id(jsonb) as assignment;
create function view_id_to_jsonb(value view_id) returns jsonb as $_$select to_jsonb(value)$_$ immutable language sql;
create function eq(leftarg jsonb, rightarg view_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = jsonb, rightarg = view_id, procedure = eq);
create cast (view_id as jsonb) with function view_id_to_jsonb(view_id) as assignment;
create function view_id(value json) returns view_id as $_$select view_id((value->>'schema_name')::text, (value->>'name')::text) $_$ immutable language sql;
create function eq(leftarg view_id, rightarg json) returns boolean as $_$select ((leftarg).schema_name)::text = ((rightarg)->>'schema_name')::text and ((leftarg).name)::text = ((rightarg)->>'name')::text$_$ immutable language sql;
create operator = (leftarg = view_id, rightarg = json, procedure = eq);
create cast (json as view_id) with function view_id(json) as assignment;
create function view_id_to_json(value view_id) returns json as $_$select to_json(value)$_$ immutable language sql;
create function eq(leftarg json, rightarg view_id) returns boolean as $_$select (leftarg)->>'schema_name' = ((rightarg).schema_name)::text and (leftarg)->>'name' = ((rightarg).name)::text$_$ immutable language sql;
create operator = (leftarg = json, rightarg = view_id, procedure = eq);
create cast (view_id as json) with function view_id_to_json(view_id) as assignment;
-- (494 rows)

create function column_id_to_schema_id(column_id column_id) returns schema_id as $_$select schema_id((column_id).schema_name) $_$ immutable language sql;
create cast (column_id as schema_id) with function column_id_to_schema_id(column_id) as assignment;
create function constraint_id_to_schema_id(constraint_id constraint_id) returns schema_id as $_$select schema_id((constraint_id).schema_name) $_$ immutable language sql;
create cast (constraint_id as schema_id) with function constraint_id_to_schema_id(constraint_id) as assignment;
create function constraint_check_id_to_schema_id(constraint_check_id constraint_check_id) returns schema_id as $_$select schema_id((constraint_check_id).schema_name) $_$ immutable language sql;
create cast (constraint_check_id as schema_id) with function constraint_check_id_to_schema_id(constraint_check_id) as assignment;
create function constraint_unique_id_to_schema_id(constraint_unique_id constraint_unique_id) returns schema_id as $_$select schema_id((constraint_unique_id).schema_name) $_$ immutable language sql;
create cast (constraint_unique_id as schema_id) with function constraint_unique_id_to_schema_id(constraint_unique_id) as assignment;
create function field_id_to_schema_id(field_id field_id) returns schema_id as $_$select schema_id((field_id).schema_name) $_$ immutable language sql;
create cast (field_id as schema_id) with function field_id_to_schema_id(field_id) as assignment;
create function foreign_column_id_to_schema_id(foreign_column_id foreign_column_id) returns schema_id as $_$select schema_id((foreign_column_id).schema_name) $_$ immutable language sql;
create cast (foreign_column_id as schema_id) with function foreign_column_id_to_schema_id(foreign_column_id) as assignment;
create function foreign_key_id_to_schema_id(foreign_key_id foreign_key_id) returns schema_id as $_$select schema_id((foreign_key_id).schema_name) $_$ immutable language sql;
create cast (foreign_key_id as schema_id) with function foreign_key_id_to_schema_id(foreign_key_id) as assignment;
create function foreign_table_id_to_schema_id(foreign_table_id foreign_table_id) returns schema_id as $_$select schema_id((foreign_table_id).schema_name) $_$ immutable language sql;
create cast (foreign_table_id as schema_id) with function foreign_table_id_to_schema_id(foreign_table_id) as assignment;
create function function_id_to_schema_id(function_id function_id) returns schema_id as $_$select schema_id((function_id).schema_name) $_$ immutable language sql;
create cast (function_id as schema_id) with function function_id_to_schema_id(function_id) as assignment;
create function operator_id_to_schema_id(operator_id operator_id) returns schema_id as $_$select schema_id((operator_id).schema_name) $_$ immutable language sql;
create cast (operator_id as schema_id) with function operator_id_to_schema_id(operator_id) as assignment;
create function policy_id_to_schema_id(policy_id policy_id) returns schema_id as $_$select schema_id((policy_id).schema_name) $_$ immutable language sql;
create cast (policy_id as schema_id) with function policy_id_to_schema_id(policy_id) as assignment;
create function relation_id_to_schema_id(relation_id relation_id) returns schema_id as $_$select schema_id((relation_id).schema_name) $_$ immutable language sql;
create cast (relation_id as schema_id) with function relation_id_to_schema_id(relation_id) as assignment;
create function row_id_to_schema_id(row_id row_id) returns schema_id as $_$select schema_id((row_id).schema_name) $_$ immutable language sql;
create cast (row_id as schema_id) with function row_id_to_schema_id(row_id) as assignment;
create function sequence_id_to_schema_id(sequence_id sequence_id) returns schema_id as $_$select schema_id((sequence_id).schema_name) $_$ immutable language sql;
create cast (sequence_id as schema_id) with function sequence_id_to_schema_id(sequence_id) as assignment;
create function table_id_to_schema_id(table_id table_id) returns schema_id as $_$select schema_id((table_id).schema_name) $_$ immutable language sql;
create cast (table_id as schema_id) with function table_id_to_schema_id(table_id) as assignment;
create function table_privilege_id_to_schema_id(table_privilege_id table_privilege_id) returns schema_id as $_$select schema_id((table_privilege_id).schema_name) $_$ immutable language sql;
create cast (table_privilege_id as schema_id) with function table_privilege_id_to_schema_id(table_privilege_id) as assignment;
create function trigger_id_to_schema_id(trigger_id trigger_id) returns schema_id as $_$select schema_id((trigger_id).schema_name) $_$ immutable language sql;
create cast (trigger_id as schema_id) with function trigger_id_to_schema_id(trigger_id) as assignment;
create function type_id_to_schema_id(type_id type_id) returns schema_id as $_$select schema_id((type_id).schema_name) $_$ immutable language sql;
create cast (type_id as schema_id) with function type_id_to_schema_id(type_id) as assignment;
create function view_id_to_schema_id(view_id view_id) returns schema_id as $_$select schema_id((view_id).schema_name) $_$ immutable language sql;
create cast (view_id as schema_id) with function view_id_to_schema_id(view_id) as assignment;
-- (38 rows)

create function column_id_to_relation_id(column_id column_id) returns relation_id as $_$select relation_id((column_id).schema_name, (column_id).relation_name) $_$ immutable language sql;
create cast (column_id as relation_id) with function column_id_to_relation_id(column_id) as assignment;
create function constraint_id_to_relation_id(constraint_id constraint_id) returns relation_id as $_$select relation_id((constraint_id).schema_name, (constraint_id).relation_name) $_$ immutable language sql;
create cast (constraint_id as relation_id) with function constraint_id_to_relation_id(constraint_id) as assignment;
create function field_id_to_relation_id(field_id field_id) returns relation_id as $_$select relation_id((field_id).schema_name, (field_id).relation_name) $_$ immutable language sql;
create cast (field_id as relation_id) with function field_id_to_relation_id(field_id) as assignment;
create function foreign_key_id_to_relation_id(foreign_key_id foreign_key_id) returns relation_id as $_$select relation_id((foreign_key_id).schema_name, (foreign_key_id).relation_name) $_$ immutable language sql;
create cast (foreign_key_id as relation_id) with function foreign_key_id_to_relation_id(foreign_key_id) as assignment;
create function policy_id_to_relation_id(policy_id policy_id) returns relation_id as $_$select relation_id((policy_id).schema_name, (policy_id).relation_name) $_$ immutable language sql;
create cast (policy_id as relation_id) with function policy_id_to_relation_id(policy_id) as assignment;
create function row_id_to_relation_id(row_id row_id) returns relation_id as $_$select relation_id((row_id).schema_name, (row_id).relation_name) $_$ immutable language sql;
create cast (row_id as relation_id) with function row_id_to_relation_id(row_id) as assignment;
create function table_privilege_id_to_relation_id(table_privilege_id table_privilege_id) returns relation_id as $_$select relation_id((table_privilege_id).schema_name, (table_privilege_id).relation_name) $_$ immutable language sql;
create cast (table_privilege_id as relation_id) with function table_privilege_id_to_relation_id(table_privilege_id) as assignment;
create function trigger_id_to_relation_id(trigger_id trigger_id) returns relation_id as $_$select relation_id((trigger_id).schema_name, (trigger_id).relation_name) $_$ immutable language sql;
create cast (trigger_id as relation_id) with function trigger_id_to_relation_id(trigger_id) as assignment;
-- (16 rows)

create function field_id_to_column_id(field_id field_id) returns column_id as $_$select column_id((field_id).schema_name, (field_id).relation_name, (field_id).column_name) $_$ immutable language sql;
create cast (field_id as column_id) with function field_id_to_column_id(field_id) as assignment;
-- (2 rows)
