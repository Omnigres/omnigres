$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
    - create extension omni_schema cascade
    - create schema test;
tests:

- name: created function with one parameter shows up with expected values
  steps:
    - create function test.test_function(input text) returns text as $$select input || ' ' || version() $$ language sql
    - query: select 
              schema_id,
              schema_name,
              id,
              function_name,
              name,
              type_id,
              type_name,
              mode,
              position,
              "default"
            from omni_schema.function_parameter where id = omni_schema.function_id('test', 'test_function', '{text}');
      results:
      - schema_id: (test)
        schema_name: test
        id: "(test,test_function,{text})"
        function_name: test_function
        name: input
        type_id: "(pg_catalog,text)"
        type_name: pg_catalog.text
        mode: IN
        position: 1
        default: null

- name: created function with one parameter with default shows up with expected values
  steps:
    - create function test.test_function(input text default 'hello') returns text as $$select input || ' ' || version() $$ language sql
    - query: select 
              schema_id,
              schema_name,
              id,
              function_name,
              name,
              type_id,
              type_name,
              mode,
              position,
              "default"
            from omni_schema.function_parameter where id = omni_schema.function_id('test', 'test_function', '{text}');
      results:
      - schema_id: (test)
        schema_name: test
        id: "(test,test_function,{text})"
        function_name: test_function
        name: input
        type_id: "(pg_catalog,text)"
        type_name: pg_catalog.text
        mode: IN
        position: 1
        default: "'hello'::text"

- name: created function with one inout parameter shows up with expected values
  steps:
    - create function test.test_function(inout input text) returns text as $$select input || ' ' || version() $$ language sql
    - query: select 
              schema_id,
              schema_name,
              id,
              function_name,
              name,
              type_id,
              type_name,
              mode,
              position,
              "default"
            from omni_schema.function_parameter where id = omni_schema.function_id('test', 'test_function', '{text}');
      results:
      - schema_id: (test)
        schema_name: test
        id: "(test,test_function,{text})"
        function_name: test_function
        name: input
        type_id: "(pg_catalog,text)"
        type_name: pg_catalog.text
        mode: INOUT
        position: 1
        default: null    

- name: created function 2 parameters shows up with expected values
  steps:
    - create function test.test_function(input text, another_input integer) returns text as $$select input || ' ' || version() $$ language sql
    - query: select 
              schema_id,
              schema_name,
              id,
              function_name,
              name,
              type_id,
              type_name,
              mode,
              position,
              "default"
            from omni_schema.function_parameter where id = omni_schema.function_id('test', 'test_function', '{text,integer}')
            order by position;
      results:
      - schema_id: (test)
        schema_name: test
        id: "(test,test_function,\"{text,integer}\")"
        function_name: test_function
        name: input
        type_id: "(pg_catalog,text)"
        type_name: pg_catalog.text
        mode: IN
        position: 1
        default: null
      - schema_id: (test)
        schema_name: test
        id: "(test,test_function,\"{text,integer}\")"
        function_name: test_function
        name: another_input
        type_id: "(pg_catalog,int4)"
        type_name: pg_catalog.int4
        mode: IN
        position: 2
        default: null 
