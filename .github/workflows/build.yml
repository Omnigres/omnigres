name: Build

on:
  push:
    branches: [ "master" ]
  pull_request_target:
    branches: [ "master" ]
    types: [ labeled, synchronize, opened ]
  schedule:
    - cron: '33 13 * * *'

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules
  # Advises omni_containers where Docker is
  DOCKER_HOST: ci-docker:2375
  # Advises tests as to where the Docker host is
  DOCKER_CI_HOST: ci-docker

jobs:
  pr:
    runs-on: ubuntu-latest
    steps:
    - name: Leave comment on PR
      if: github.event_name != 'push' && github.event.label.name == 'approve-ci'
      uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.payload.pull_request.number;
          const message = 'Please wait until CI run is approved (watch out for the `approve-ci` label) ⏲️';
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: message
          });
  build:
    strategy:
      matrix:
        pgver: [ 16, 15, 14, 13 ]
        os: [ warp-ubuntu-latest-x64-4x, macos-latest ]
        build_type: [Debug, Release]
        exclude:
        - os: macos-latest
          pgver: 15
        - os: macos-latest
          pgver: 14
        - os: macos-latest
          pgver: 13
        - os: macos-latest
          pgver: 12
        - os: macos-latest
          pgver: 11
      fail-fast: false

    if: github.event_name == 'push' || github.event.label.name == 'approve-ci'
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    # This is done to address the problem on macOS where .pg built in a directory of one
    # GitHub Action runner won't work when restored in another one since dylds have install_name pointing
    # to the original location. We include the hash of their path into the cache name.
    - name: Get path hash
      if: matrix.os == 'macos'
      run: |
        echo "PATH_SUFFIX=-$(pwd | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

    # On other systems, make it explicitly empty
    - name: Get path hash
      if: matrix.os != 'macos'
      run: |
        echo "PATH_SUFFIX=" >> $GITHUB_ENV

    - uses: actions/cache@v3
      with:
        path: .pg
        key: ${{ matrix.os }}-pg-${{ matrix.pgver }}-${{ matrix.build_type }}-${{ hashFiles('cmake/FindPostgreSQL.cmake') }}${{ env.PATH_SUFFIX }}

    - uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/build/_deps
        key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('extensions/**/CMakeLists.txt', '*/CMakeLists.txt', 'cmake/*.cmake') }}

    - name: Tailscale
      uses: omnigres/tailscale-github-action@acfb679296986fae0eba66aadc3a9b40edfb287b #tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:ci

    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DPGVER=${{ matrix.pgver }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --parallel --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: TMPDIR=$RUNNER_TEMP DOCKER_HOST_IP=$(tailscale ip -4) ctest -timeout 1000 --force-new-ctest-process  --repeat until-pass:10 --output-on-failure -j $(nproc) -C ${{matrix.build_type}}

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ${{ matrix.os }}-${{ matrix.pgver }}-regression.diffs
        path: ${{ github.workspace }}/build/extensions/**/regression.diffs

    - name: Print error-related artifacts
      if: failure()
      run: |
        echo "- diffs: "
        find ${{github.workspace}}/build -name \*.diffs -exec echo "=== {}:" \; -exec cat {} \;
        echo "- postmaster.log: "
        find ${{github.workspace}}/build -name postmaster.log -exec echo "=== {}:" \; -exec cat {} \;
        echo "- initdb.log: "
        find ${{github.workspace}}/build -name initdb.log -exec echo "=== {}:" \; -exec cat {} \;

  # Ensure it can be built against externally-supplied Postgres
  build-external-pg:
    runs-on: warp-ubuntu-latest-x64-4x

    steps:
    - uses: actions/checkout@v3

    - name: Install necessary dependencies
      run: |
        sudo apt-get update
        sudo apt-get remove -f postgresql-14
        sudo apt-get install -f postgresql-server-dev-14 postgresql-14 postgresql-plpython3-14

    - name: Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DPG_CONFIG=$(which pg_config)

    - name: Build
      run: cmake --build ${{github.workspace}}/build --parallel --config Release --target all --target package

  # Ensure every extension can be built independently
  build-extensions-independently:
    runs-on: warp-ubuntu-latest-x64-4x

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: .pg
        key: ${{ matrix.os }}-pg-${{ matrix.pgver }}-${{ hashFiles('cmake/FindPostgreSQL.cmake') }}

    - run: ci/build-extensions-separately